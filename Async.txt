Асинхронность выводит задачи из основного потока в асинхронные методы которые будут независимо работать, чтобы не блокировать интерфейс на время выполнения задач.
Еще асинхронность используют для отправки запросов в БД и пока запрос отправляется пользователь может продолжить работу с приложением, что невозможно если синхронно посылать запрос.
чтобы сделать метод асинхронным, нужно прописать в заголовке метода ключевое слово async это даст возможность использовать await внутри метода, асинхронный метод может возвращать Task или ничего и может получать как и множество так и не получать параметр вообще и не может работать с параметрами с модификаторами out и ref.
await определяет функцию или блок кода который будет выполнятся асинзронно.
для того чтобы различать аснхронные методы от обычных, принято писать в названии методов слово Async
в статье приведен пример с использованием асинхронного метода который возвращает факториал числа, и для того чтобы симитировать долгое выполнение задачи там используется Thread.Sleep(время) что заставляет поток отключится на некоторое время
далее рассматривается вывод после запуска программы и поэтапный разбор
метод вызванный асинхронно будет выполнятся синхронно до выражения await в методе
далее пример с записью и считыванием данных из файла при помощи встроенных в фреймворк асинхронных методов в StreamWriter WriteLineAsync() и StreamReader ReadToEndAsync(), для этого берем эти методы в выражение await
чтобы метод сразу начал работать асинхронно, надо весь блок кода взять в выражение await таким образом await Task.Run(()=>{блок кода который будет асинхронно выполняться;});

https://metanit.com/sharp/tutorial/13.3.php